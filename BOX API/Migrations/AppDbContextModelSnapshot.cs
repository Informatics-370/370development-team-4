// <auto-generated />
using System;
using BOX.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BOX.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BOX.Models.Admin", b =>
                {
                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("BOX.Models.Audit_Trail", b =>
                {
                    b.Property<int>("AuditTrailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditTrailID"), 1L, 1);

                    b.Property<string>("Critical_Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Critical_Data_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Transaction_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditTrailID");

                    b.ToTable("Audit_Trail");
                });

            modelBuilder.Entity("BOX.Models.Bulk_Discount", b =>
                {
                    b.Property<int>("DiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountID"), 1L, 1);

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("DiscountID");

                    b.ToTable("Bulk_Discount");
                });

            modelBuilder.Entity("BOX.Models.Category_Size_Variables", b =>
                {
                    b.Property<int>("CategoryID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("SizeVariablesID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.HasKey("CategoryID", "SizeVariablesID");

                    b.HasIndex("SizeVariablesID");

                    b.ToTable("Category_Size_Variables");
                });

            modelBuilder.Entity("BOX.Models.Cost_Price_Formula_Variables", b =>
                {
                    b.Property<int>("FormulaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormulaID"), 1L, 1);

                    b.Property<decimal>("Box_Factor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Factory_Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Mark_Up")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rate_Per_Ton")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FormulaID");

                    b.ToTable("cost_Price_Formula_Variables");
                });

            modelBuilder.Entity("BOX.Models.Credit_Application", b =>
                {
                    b.Property<int>("creditApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("creditApplicationID"), 1L, 1);

                    b.Property<byte[]>("Application_Pdf")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("CreditApplicationStatusID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("creditApplicationID");

                    b.HasIndex("CreditApplicationStatusID");

                    b.HasIndex("UserId");

                    b.ToTable("Credit_Application");
                });

            modelBuilder.Entity("BOX.Models.Credit_Application_Status", b =>
                {
                    b.Property<int>("CreditApplicationStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditApplicationStatusID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CreditApplicationStatusID");

                    b.ToTable("Credit_Application_Status");
                });

            modelBuilder.Entity("BOX.Models.Custom_Product", b =>
                {
                    b.Property<int>("CustomProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomProductID"), 1L, 1);

                    b.Property<int>("FormulaID")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Label")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Sides")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("CustomProductID");

                    b.HasIndex("FormulaID");

                    b.HasIndex("ItemID");

                    b.ToTable("Custom_Product");
                });

            modelBuilder.Entity("BOX.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("creditBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("creditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("isBusiness")
                        .HasColumnType("bit");

                    b.Property<string>("vatNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TitleId");

                    b.HasIndex("UserId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("BOX.Models.Customer_Order", b =>
                {
                    b.Property<int>("CustomerOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerOrderID"), 1L, 1);

                    b.Property<int>("CustomerOrderStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Delivery_Date")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Delivery_Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Delivery_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderDeliveryScheduleID")
                        .HasColumnType("int");

                    b.Property<int>("QuoteID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CustomerOrderID");

                    b.HasIndex("CustomerOrderStatusID");

                    b.HasIndex("OrderDeliveryScheduleID");

                    b.HasIndex("QuoteID");

                    b.HasIndex("UserId");

                    b.ToTable("Customer_Order");
                });

            modelBuilder.Entity("BOX.Models.Customer_Order_Line", b =>
                {
                    b.Property<int>("CustomerOrderLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerOrderLineID"), 1L, 1);

                    b.Property<decimal>("Confirmed_Unit_Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CustomProductID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerOrderID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerReturnID")
                        .HasColumnType("int");

                    b.Property<int?>("FixedProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CustomerOrderLineID");

                    b.HasIndex("CustomProductID");

                    b.HasIndex("CustomerOrderID");

                    b.HasIndex("CustomerReturnID");

                    b.HasIndex("FixedProductID");

                    b.ToTable("Customer_Order_Line");
                });

            modelBuilder.Entity("BOX.Models.Customer_Order_Status", b =>
                {
                    b.Property<int>("CustomerOrderStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerOrderStatusID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CustomerOrderStatusID");

                    b.ToTable("Customer_Order_Status");
                });

            modelBuilder.Entity("BOX.Models.Customer_Return", b =>
                {
                    b.Property<int?>("CustomerReturnID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CustomerReturnID"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerReturnReasonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerReturnID");

                    b.HasIndex("CustomerReturnReasonID");

                    b.ToTable("Customer_Return");
                });

            modelBuilder.Entity("BOX.Models.Customer_Return_Reason", b =>
                {
                    b.Property<int>("CustomerReturnReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerReturnReasonID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CustomerReturnReasonID");

                    b.ToTable("Customer_Return_Reason");
                });

            modelBuilder.Entity("BOX.Models.Customer_Review", b =>
                {
                    b.Property<int>("CustomerReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerReviewID"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Product_Rating")
                        .HasColumnType("int");

                    b.Property<bool>("Recommendation")
                        .HasMaxLength(256)
                        .HasColumnType("bit");

                    b.HasKey("CustomerReviewID");

                    b.ToTable("Customer_Review");
                });

            modelBuilder.Entity("BOX.Models.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("BOX.Models.Fixed_Product", b =>
                {
                    b.Property<int>("FixedProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FixedProductID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Product_Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("QRCodeID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity_On_Hand")
                        .HasColumnType("int");

                    b.Property<int>("SizeID")
                        .HasColumnType("int");

                    b.HasKey("FixedProductID");

                    b.HasIndex("ItemID");

                    b.HasIndex("QRCodeID");

                    b.HasIndex("SizeID");

                    b.ToTable("Fixed_Product");
                });

            modelBuilder.Entity("BOX.Models.Order_Delivery_Schedule", b =>
                {
                    b.Property<int>("OrderDeliveryScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDeliveryScheduleID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderDeliveryScheduleID");

                    b.HasIndex("UserId");

                    b.ToTable("Order_Delivery_Schedule");
                });

            modelBuilder.Entity("BOX.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerOrderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date_And_Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentTypeID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("CustomerOrderID");

                    b.HasIndex("PaymentTypeID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("BOX.Models.Payment_Type", b =>
                {
                    b.Property<int>("PaymentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentTypeID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("PaymentTypeID");

                    b.ToTable("Payment_Type");
                });

            modelBuilder.Entity("BOX.Models.Price", b =>
                {
                    b.Property<int>("PriceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceID"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FixedProductID")
                        .HasColumnType("int");

                    b.HasKey("PriceID");

                    b.HasIndex("FixedProductID");

                    b.ToTable("Price");
                });

            modelBuilder.Entity("BOX.Models.Price_Match_File", b =>
                {
                    b.Property<int>("PriceMatchFileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceMatchFileID"), 1L, 1);

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PriceMatchFileID");

                    b.ToTable("Price_Match_File");
                });

            modelBuilder.Entity("BOX.Models.Product_Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryID");

                    b.ToTable("Product_Category");
                });

            modelBuilder.Entity("BOX.Models.Product_Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"), 1L, 1);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("ItemID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Product_Item");
                });

            modelBuilder.Entity("BOX.Models.QR_Code", b =>
                {
                    b.Property<int>("QRCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCodeID"), 1L, 1);

                    b.Property<byte[]>("QR_Code_Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("QRCodeID");

                    b.ToTable("QR_Code");
                });

            modelBuilder.Entity("BOX.Models.Quote", b =>
                {
                    b.Property<int>("QuoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuoteID"), 1L, 1);

                    b.Property<DateTime>("Date_Generated")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuoteDurationID")
                        .HasColumnType("int");

                    b.Property<int>("QuoteRequestID")
                        .HasColumnType("int");

                    b.Property<int>("QuoteStatusID")
                        .HasColumnType("int");

                    b.Property<int?>("RejectReasonID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuoteID");

                    b.HasIndex("QuoteDurationID");

                    b.HasIndex("QuoteRequestID");

                    b.HasIndex("QuoteStatusID");

                    b.HasIndex("RejectReasonID");

                    b.HasIndex("UserId");

                    b.ToTable("Quote");
                });

            modelBuilder.Entity("BOX.Models.Quote_Duration", b =>
                {
                    b.Property<int>("QuoteDurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuoteDurationID"), 1L, 1);

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.HasKey("QuoteDurationID");

                    b.ToTable("Quote_Duration");
                });

            modelBuilder.Entity("BOX.Models.Quote_Line", b =>
                {
                    b.Property<int>("QuoteLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuoteLineID"), 1L, 1);

                    b.Property<decimal>("Confirmed_Unit_Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CustomProductID")
                        .HasColumnType("int");

                    b.Property<int?>("FixedProductID")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuoteID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("QuoteLineID");

                    b.HasIndex("CustomProductID");

                    b.HasIndex("FixedProductID");

                    b.HasIndex("QuoteID");

                    b.ToTable("Quote_Line");
                });

            modelBuilder.Entity("BOX.Models.Quote_Request", b =>
                {
                    b.Property<int>("QuoteRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuoteRequestID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuoteRequestStatusID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuoteRequestID");

                    b.HasIndex("QuoteRequestStatusID");

                    b.HasIndex("UserId");

                    b.ToTable("Quote_Request");
                });

            modelBuilder.Entity("BOX.Models.Quote_Request_Line", b =>
                {
                    b.Property<int>("QuoteRequestLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuoteRequestLineID"), 1L, 1);

                    b.Property<int?>("CustomProductID")
                        .HasColumnType("int");

                    b.Property<int?>("FixedProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuoteRequestID")
                        .HasColumnType("int");

                    b.HasKey("QuoteRequestLineID");

                    b.HasIndex("CustomProductID");

                    b.HasIndex("FixedProductID");

                    b.HasIndex("QuoteRequestID");

                    b.ToTable("Quote_Request_Line");
                });

            modelBuilder.Entity("BOX.Models.Quote_Request_Status", b =>
                {
                    b.Property<int>("QuoteRequestStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuoteRequestStatusID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("QuoteRequestStatusID");

                    b.ToTable("Quote_Request_Status");
                });

            modelBuilder.Entity("BOX.Models.Quote_Status", b =>
                {
                    b.Property<int>("QuoteStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuoteStatusID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("QuoteStatusID");

                    b.ToTable("Quote_Status");
                });

            modelBuilder.Entity("BOX.Models.Raw_Material", b =>
                {
                    b.Property<int?>("RawMaterialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("RawMaterialID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("QRCodeID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity_On_Hand")
                        .HasColumnType("int");

                    b.HasKey("RawMaterialID");

                    b.HasIndex("QRCodeID");

                    b.ToTable("Raw_Material");
                });

            modelBuilder.Entity("BOX.Models.RegisterMessages", b =>
                {
                    b.Property<int>("messageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("messageId"), 1L, 1);

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("messageDate")
                        .HasColumnType("datetime2");

                    b.HasKey("messageId");

                    b.ToTable("RegisterMessages");
                });

            modelBuilder.Entity("BOX.Models.Reject_Reason", b =>
                {
                    b.Property<int>("RejectReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RejectReasonID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriceMatchFileID")
                        .HasColumnType("int");

                    b.HasKey("RejectReasonID");

                    b.HasIndex("PriceMatchFileID");

                    b.ToTable("Reject_Reason");
                });

            modelBuilder.Entity("BOX.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("BOX.Models.Size_Units", b =>
                {
                    b.Property<int>("SizeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeID"), 1L, 1);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SizeID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Size_Units");
                });

            modelBuilder.Entity("BOX.Models.Size_Variables", b =>
                {
                    b.Property<int>("SizeVariablesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeVariablesID"), 1L, 1);

                    b.Property<bool>("Height")
                        .HasColumnType("bit");

                    b.Property<bool>("Length")
                        .HasColumnType("bit");

                    b.Property<bool>("Volume")
                        .HasColumnType("bit");

                    b.Property<bool>("Weight")
                        .HasColumnType("bit");

                    b.Property<bool>("Width")
                        .HasColumnType("bit");

                    b.HasKey("SizeVariablesID");

                    b.ToTable("Size_Variables");
                });

            modelBuilder.Entity("BOX.Models.Stock_Take", b =>
                {
                    b.Property<int>("StockTakeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockTakeID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StockTakeID");

                    b.HasIndex("UserId");

                    b.ToTable("Stock_Take");
                });

            modelBuilder.Entity("BOX.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contact_Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SupplierID");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("BOX.Models.Supplier_Order", b =>
                {
                    b.Property<int>("SupplierOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierOrderID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("SupplierOrderID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Supplier_Order");
                });

            modelBuilder.Entity("BOX.Models.Supplier_OrderLine", b =>
                {
                    b.Property<int>("Supplier_Order_LineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Supplier_Order_LineID"), 1L, 1);

                    b.Property<int?>("FixedProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("RawMaterialID")
                        .HasColumnType("int");

                    b.Property<int>("SupplierOrderID")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierReturnID")
                        .HasColumnType("int");

                    b.HasKey("Supplier_Order_LineID");

                    b.HasIndex("FixedProductID");

                    b.HasIndex("RawMaterialID");

                    b.HasIndex("SupplierOrderID");

                    b.HasIndex("SupplierReturnID");

                    b.ToTable("Supplier_OrderLine");
                });

            modelBuilder.Entity("BOX.Models.Supplier_Return", b =>
                {
                    b.Property<int?>("SupplierReturnID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SupplierReturnID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("SupplierReturnID");

                    b.ToTable("Supplier_Return");
                });

            modelBuilder.Entity("BOX.Models.Title", b =>
                {
                    b.Property<int>("TitleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TitleID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("TitleID");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("BOX.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TitleID")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("user_Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("user_FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("user_LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TitleID");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BOX.Models.User_Permission", b =>
                {
                    b.Property<int>("UserPermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPermissionID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserPermissionID");

                    b.ToTable("User_Permission");
                });

            modelBuilder.Entity("BOX.Models.User_Role_Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("User_Role_Permission");
                });

            modelBuilder.Entity("BOX.Models.VAT", b =>
                {
                    b.Property<int>("VatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VatID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.HasKey("VatID");

                    b.ToTable("VAT");
                });

            modelBuilder.Entity("BOX.Models.Write_Off", b =>
                {
                    b.Property<int>("WriteOffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WriteOffID"), 1L, 1);

                    b.Property<int?>("FixedProductId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("RawMaterialId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("StockTakeID")
                        .HasColumnType("int");

                    b.Property<int>("WriteOffReasonID")
                        .HasColumnType("int");

                    b.HasKey("WriteOffID");

                    b.HasIndex("FixedProductId");

                    b.HasIndex("RawMaterialId");

                    b.HasIndex("StockTakeID");

                    b.HasIndex("WriteOffReasonID");

                    b.ToTable("Write_Off");
                });

            modelBuilder.Entity("BOX.Models.Write_Off_Reason", b =>
                {
                    b.Property<int>("WriteOffReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WriteOffReasonID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WriteOffReasonID");

                    b.ToTable("Write_Off_Reason");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BOX.Models.Admin", b =>
                {
                    b.HasOne("BOX.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BOX.Models.Category_Size_Variables", b =>
                {
                    b.HasOne("BOX.Models.Product_Category", "Product_Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Size_Variables", "Size_Variables")
                        .WithMany()
                        .HasForeignKey("SizeVariablesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product_Category");

                    b.Navigation("Size_Variables");
                });

            modelBuilder.Entity("BOX.Models.Credit_Application", b =>
                {
                    b.HasOne("BOX.Models.Credit_Application_Status", "Credit_Application_Status")
                        .WithMany()
                        .HasForeignKey("CreditApplicationStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credit_Application_Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BOX.Models.Custom_Product", b =>
                {
                    b.HasOne("BOX.Models.Cost_Price_Formula_Variables", "Cost_Price_Formula_Variables")
                        .WithMany()
                        .HasForeignKey("FormulaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Product_Item", "Product_Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cost_Price_Formula_Variables");

                    b.Navigation("Product_Item");
                });

            modelBuilder.Entity("BOX.Models.Customer", b =>
                {
                    b.HasOne("BOX.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Title");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BOX.Models.Customer_Order", b =>
                {
                    b.HasOne("BOX.Models.Customer_Order_Status", "Customer_Order_Status")
                        .WithMany()
                        .HasForeignKey("CustomerOrderStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Order_Delivery_Schedule", "Order_Delivery_Schedule")
                        .WithMany()
                        .HasForeignKey("OrderDeliveryScheduleID");

                    b.HasOne("BOX.Models.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer_Order_Status");

                    b.Navigation("Order_Delivery_Schedule");

                    b.Navigation("Quote");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BOX.Models.Customer_Order_Line", b =>
                {
                    b.HasOne("BOX.Models.Custom_Product", "Custom_Product")
                        .WithMany()
                        .HasForeignKey("CustomProductID");

                    b.HasOne("BOX.Models.Customer_Order", "Customer_Order")
                        .WithMany()
                        .HasForeignKey("CustomerOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Customer_Return", "Customer_Return")
                        .WithMany()
                        .HasForeignKey("CustomerReturnID");

                    b.HasOne("BOX.Models.Fixed_Product", "Fixed_Product")
                        .WithMany()
                        .HasForeignKey("FixedProductID");

                    b.Navigation("Custom_Product");

                    b.Navigation("Customer_Order");

                    b.Navigation("Customer_Return");

                    b.Navigation("Fixed_Product");
                });

            modelBuilder.Entity("BOX.Models.Customer_Return", b =>
                {
                    b.HasOne("BOX.Models.Customer_Return_Reason", "Customer_Return_Reason")
                        .WithMany()
                        .HasForeignKey("CustomerReturnReasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer_Return_Reason");
                });

            modelBuilder.Entity("BOX.Models.Employee", b =>
                {
                    b.HasOne("BOX.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BOX.Models.Fixed_Product", b =>
                {
                    b.HasOne("BOX.Models.Product_Item", "Product_Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.QR_Code", "QR_Code")
                        .WithMany()
                        .HasForeignKey("QRCodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Size_Units", "Size_Units")
                        .WithMany()
                        .HasForeignKey("SizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product_Item");

                    b.Navigation("QR_Code");

                    b.Navigation("Size_Units");
                });

            modelBuilder.Entity("BOX.Models.Order_Delivery_Schedule", b =>
                {
                    b.HasOne("BOX.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BOX.Models.Payment", b =>
                {
                    b.HasOne("BOX.Models.Customer_Order", "Customer_Order")
                        .WithMany()
                        .HasForeignKey("CustomerOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Payment_Type", "Payment_Type")
                        .WithMany()
                        .HasForeignKey("PaymentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer_Order");

                    b.Navigation("Payment_Type");
                });

            modelBuilder.Entity("BOX.Models.Price", b =>
                {
                    b.HasOne("BOX.Models.Fixed_Product", "Fixed_Product")
                        .WithMany()
                        .HasForeignKey("FixedProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fixed_Product");
                });

            modelBuilder.Entity("BOX.Models.Product_Item", b =>
                {
                    b.HasOne("BOX.Models.Product_Category", "Product_Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product_Category");
                });

            modelBuilder.Entity("BOX.Models.Quote", b =>
                {
                    b.HasOne("BOX.Models.Quote_Duration", "Quote_Duration")
                        .WithMany()
                        .HasForeignKey("QuoteDurationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Quote_Request", "Quote_Request")
                        .WithMany()
                        .HasForeignKey("QuoteRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Quote_Status", "Quote_Status")
                        .WithMany()
                        .HasForeignKey("QuoteStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Reject_Reason", "Reject_Reason")
                        .WithMany()
                        .HasForeignKey("RejectReasonID");

                    b.HasOne("BOX.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote_Duration");

                    b.Navigation("Quote_Request");

                    b.Navigation("Quote_Status");

                    b.Navigation("Reject_Reason");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BOX.Models.Quote_Line", b =>
                {
                    b.HasOne("BOX.Models.Custom_Product", "Custom_Product")
                        .WithMany()
                        .HasForeignKey("CustomProductID");

                    b.HasOne("BOX.Models.Fixed_Product", "Fixed_Product")
                        .WithMany()
                        .HasForeignKey("FixedProductID");

                    b.HasOne("BOX.Models.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Custom_Product");

                    b.Navigation("Fixed_Product");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("BOX.Models.Quote_Request", b =>
                {
                    b.HasOne("BOX.Models.Quote_Request_Status", "Quote_Request_Status")
                        .WithMany()
                        .HasForeignKey("QuoteRequestStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote_Request_Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BOX.Models.Quote_Request_Line", b =>
                {
                    b.HasOne("BOX.Models.Custom_Product", "Custom_Product")
                        .WithMany()
                        .HasForeignKey("CustomProductID");

                    b.HasOne("BOX.Models.Fixed_Product", "Fixed_Product")
                        .WithMany()
                        .HasForeignKey("FixedProductID");

                    b.HasOne("BOX.Models.Quote_Request", "Quote_Request")
                        .WithMany()
                        .HasForeignKey("QuoteRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Custom_Product");

                    b.Navigation("Fixed_Product");

                    b.Navigation("Quote_Request");
                });

            modelBuilder.Entity("BOX.Models.Raw_Material", b =>
                {
                    b.HasOne("BOX.Models.QR_Code", "QR_Code")
                        .WithMany()
                        .HasForeignKey("QRCodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QR_Code");
                });

            modelBuilder.Entity("BOX.Models.Reject_Reason", b =>
                {
                    b.HasOne("BOX.Models.Price_Match_File", "Price_Match_File")
                        .WithMany()
                        .HasForeignKey("PriceMatchFileID");

                    b.Navigation("Price_Match_File");
                });

            modelBuilder.Entity("BOX.Models.Size_Units", b =>
                {
                    b.HasOne("BOX.Models.Product_Category", "Product_Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product_Category");
                });

            modelBuilder.Entity("BOX.Models.Stock_Take", b =>
                {
                    b.HasOne("BOX.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BOX.Models.Supplier_Order", b =>
                {
                    b.HasOne("BOX.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BOX.Models.Supplier_OrderLine", b =>
                {
                    b.HasOne("BOX.Models.Fixed_Product", "Fixed_Product")
                        .WithMany()
                        .HasForeignKey("FixedProductID");

                    b.HasOne("BOX.Models.Raw_Material", "Raw_Material")
                        .WithMany()
                        .HasForeignKey("RawMaterialID");

                    b.HasOne("BOX.Models.Supplier_Order", "Supplier_Order")
                        .WithMany()
                        .HasForeignKey("SupplierOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Supplier_Return", "Supplier_Return")
                        .WithMany()
                        .HasForeignKey("SupplierReturnID");

                    b.Navigation("Fixed_Product");

                    b.Navigation("Raw_Material");

                    b.Navigation("Supplier_Order");

                    b.Navigation("Supplier_Return");
                });

            modelBuilder.Entity("BOX.Models.User", b =>
                {
                    b.HasOne("BOX.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Title");
                });

            modelBuilder.Entity("BOX.Models.User_Role_Permission", b =>
                {
                    b.HasOne("BOX.Models.User_Permission", "UserPermission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserPermission");
                });

            modelBuilder.Entity("BOX.Models.Write_Off", b =>
                {
                    b.HasOne("BOX.Models.Fixed_Product", "FixedProduct")
                        .WithMany()
                        .HasForeignKey("FixedProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Raw_Material", "RawMaterial")
                        .WithMany()
                        .HasForeignKey("RawMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Stock_Take", "Stock_Take")
                        .WithMany()
                        .HasForeignKey("StockTakeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Write_Off_Reason", "Write_Off_Reason")
                        .WithMany()
                        .HasForeignKey("WriteOffReasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FixedProduct");

                    b.Navigation("RawMaterial");

                    b.Navigation("Stock_Take");

                    b.Navigation("Write_Off_Reason");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BOX.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BOX.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BOX.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BOX.Models.User_Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
