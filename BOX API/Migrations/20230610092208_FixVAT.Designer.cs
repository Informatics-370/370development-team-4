// <auto-generated />
using System;
using BOX.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BOX.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230610092208_FixVAT")]
    partial class FixVAT
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BOX.Models.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminID"), 1L, 1);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AdminID");

                    b.HasIndex("UserID");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("BOX.Models.Audit_Trail", b =>
                {
                    b.Property<int>("AuditTrailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditTrailID"), 1L, 1);

                    b.Property<bool>("Action")
                        .HasColumnType("bit");

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Item_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Item_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditTrailID");

                    b.ToTable("Audit_Trail");
                });

            modelBuilder.Entity("BOX.Models.Category_Size_Variables", b =>
                {
                    b.Property<int>("CategoryID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("SizeVariablesID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.HasKey("CategoryID", "SizeVariablesID");

                    b.HasIndex("SizeVariablesID");

                    b.ToTable("Category_Size_Variables");
                });

            modelBuilder.Entity("BOX.Models.Cost_Price_Formula_Variables", b =>
                {
                    b.Property<int>("FormulaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormulaID"), 1L, 1);

                    b.Property<decimal>("Box_Factor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Factory_Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Mark_Up")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rate_Per_Ton")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FormulaID");

                    b.ToTable("cost_Price_Formula_Variables");
                });

            modelBuilder.Entity("BOX.Models.Credit_Application", b =>
                {
                    b.Property<int>("creditApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("creditApplicationID"), 1L, 1);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Application_Pdf")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("CreditApplicationStatusID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.HasKey("creditApplicationID");

                    b.HasIndex("AdminID");

                    b.HasIndex("CreditApplicationStatusID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Credit_Application");
                });

            modelBuilder.Entity("BOX.Models.Credit_Application_Status", b =>
                {
                    b.Property<int>("CreditApplicationStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditApplicationStatusID"), 1L, 1);

                    b.HasKey("CreditApplicationStatusID");

                    b.ToTable("Credit_Application_Status");
                });

            modelBuilder.Entity("BOX.Models.Custom_Product", b =>
                {
                    b.Property<int>("CustomProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomProductID"), 1L, 1);

                    b.Property<int>("FormulaID")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Label")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Logo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CustomProductID");

                    b.HasIndex("FormulaID");

                    b.HasIndex("ItemID");

                    b.ToTable("Custom_Product");
                });

            modelBuilder.Entity("BOX.Models.Customer", b =>
                {
                    b.Property<int>("customerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("customerID"), 1L, 1);

                    b.Property<decimal>("Credit_Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Credit_Limit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("VAT_NO")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("isBusiness")
                        .HasColumnType("bit");

                    b.HasKey("customerID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("UserID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("BOX.Models.Customer_Order", b =>
                {
                    b.Property<int>("CustomerOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerOrderID"), 1L, 1);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerOrderStatusID")
                        .HasColumnType("int");

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<byte[]>("Delivery_Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("OrderDeliveryScheduleID")
                        .HasColumnType("int");

                    b.HasKey("CustomerOrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("CustomerOrderStatusID");

                    b.HasIndex("OrderDeliveryScheduleID");

                    b.ToTable("Customer_Order");
                });

            modelBuilder.Entity("BOX.Models.Customer_Order_Line", b =>
                {
                    b.Property<int>("CustomerOrderID")
                        .HasColumnType("int");

                    b.Property<int>("FixedProductID")
                        .HasColumnType("int");

                    b.Property<int>("CustomProductID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerRefundID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CustomerOrderID", "FixedProductID", "CustomProductID");

                    b.HasIndex("CustomProductID");

                    b.HasIndex("CustomerRefundID");

                    b.HasIndex("FixedProductID");

                    b.ToTable("Customer_Order_Line");
                });

            modelBuilder.Entity("BOX.Models.Customer_Order_Status", b =>
                {
                    b.Property<int>("CustomerOrderStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerOrderStatusID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CustomerOrderStatusID");

                    b.ToTable("Customer_Order_Status");
                });

            modelBuilder.Entity("BOX.Models.Customer_Refund", b =>
                {
                    b.Property<int>("CustomerRefundID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerRefundID"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerRefundReasonID")
                        .HasColumnType("int");

                    b.HasKey("CustomerRefundID");

                    b.HasIndex("CustomerRefundReasonID");

                    b.ToTable("Customer_Refund");
                });

            modelBuilder.Entity("BOX.Models.Customer_Refund_Reason", b =>
                {
                    b.Property<int>("CustomerRefundReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerRefundReasonID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CustomerRefundReasonID");

                    b.ToTable("Customer_Refund_Reason");
                });

            modelBuilder.Entity("BOX.Models.Customer_Review", b =>
                {
                    b.Property<int>("CustomerReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerReviewID"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Product_Rating")
                        .HasColumnType("int");

                    b.Property<string>("Recommendation")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("CustomerReviewID");

                    b.ToTable("Customer_Review");
                });

            modelBuilder.Entity("BOX.Models.Discount", b =>
                {
                    b.Property<int>("DiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountID"), 1L, 1);

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.HasKey("DiscountID");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("BOX.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"), 1L, 1);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.HasIndex("UserID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("BOX.Models.Estimate", b =>
                {
                    b.Property<int>("EstimateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstimateID"), 1L, 1);

                    b.Property<int>("EstimateDurationID")
                        .HasColumnType("int");

                    b.Property<int>("EstimateStatusID")
                        .HasColumnType("int");

                    b.HasKey("EstimateID");

                    b.HasIndex("EstimateDurationID");

                    b.HasIndex("EstimateStatusID");

                    b.ToTable("Estimate");
                });

            modelBuilder.Entity("BOX.Models.Estimate_Duration", b =>
                {
                    b.Property<int>("EstimateDurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstimateDurationID"), 1L, 1);

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.HasKey("EstimateDurationID");

                    b.ToTable("Estimate_Duration");
                });

            modelBuilder.Entity("BOX.Models.Estimate_Line", b =>
                {
                    b.Property<int>("CustomerID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("EstimateID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("AdminID")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Confirmed_Unit_Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CustomerID", "EstimateID");

                    b.HasIndex("AdminID");

                    b.HasIndex("EstimateID");

                    b.ToTable("Estimate_Line");
                });

            modelBuilder.Entity("BOX.Models.Estimate_Status", b =>
                {
                    b.Property<int>("EstimateStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstimateStatusID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("EstimateStatusID");

                    b.ToTable("Estimate_Status");
                });

            modelBuilder.Entity("BOX.Models.Fixed_Product", b =>
                {
                    b.Property<int>("FixedProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FixedProductID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QRCodeID")
                        .HasColumnType("int");

                    b.Property<int>("SizeID")
                        .HasColumnType("int");

                    b.HasKey("FixedProductID");

                    b.HasIndex("ItemID");

                    b.HasIndex("QRCodeID");

                    b.HasIndex("SizeID");

                    b.ToTable("Fixed_Product");
                });

            modelBuilder.Entity("BOX.Models.Order_Delivery_Schedule", b =>
                {
                    b.Property<int>("OrderDeliveryScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDeliveryScheduleID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.HasKey("OrderDeliveryScheduleID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Order_Delivery_Schedule");
                });

            modelBuilder.Entity("BOX.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date_And_Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentTypeID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PaymentTypeID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("BOX.Models.Payment_Type", b =>
                {
                    b.Property<int>("PaymentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentTypeID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("PaymentTypeID");

                    b.ToTable("Payment_Type");
                });

            modelBuilder.Entity("BOX.Models.Product_Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryID");

                    b.ToTable("Product_Category");
                });

            modelBuilder.Entity("BOX.Models.Product_Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"), 1L, 1);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("ItemID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Product_Item");
                });

            modelBuilder.Entity("BOX.Models.QR_Code", b =>
                {
                    b.Property<int>("QRCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCodeID"), 1L, 1);

                    b.Property<string>("QR_Code_Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QRCodeID");

                    b.ToTable("QR_Code");
                });

            modelBuilder.Entity("BOX.Models.Raw_Material", b =>
                {
                    b.Property<int>("RawMaterialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RawMaterialID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("QRCodeID")
                        .HasColumnType("int");

                    b.HasKey("RawMaterialID");

                    b.HasIndex("QRCodeID");

                    b.ToTable("Raw_Material");
                });

            modelBuilder.Entity("BOX.Models.Size_Units", b =>
                {
                    b.Property<int>("SizeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SizeID");

                    b.ToTable("Size_Units");
                });

            modelBuilder.Entity("BOX.Models.Size_Variables", b =>
                {
                    b.Property<int>("SizeVariablesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeVariablesID"), 1L, 1);

                    b.Property<bool>("Height")
                        .HasColumnType("bit");

                    b.Property<bool>("Length")
                        .HasColumnType("bit");

                    b.Property<bool>("Volume")
                        .HasColumnType("bit");

                    b.Property<bool>("Weight")
                        .HasColumnType("bit");

                    b.Property<bool>("Width")
                        .HasColumnType("bit");

                    b.HasKey("SizeVariablesID");

                    b.ToTable("Size_Variables");
                });

            modelBuilder.Entity("BOX.Models.Stock_Take", b =>
                {
                    b.Property<int>("StockTakeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockTakeID"), 1L, 1);

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.HasKey("StockTakeID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Stock_Take");
                });

            modelBuilder.Entity("BOX.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contact_Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("FixedProductID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SupplierID");

                    b.HasIndex("FixedProductID");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("BOX.Models.Supplier_Order", b =>
                {
                    b.Property<int>("SupplierOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierOrderID"), 1L, 1);

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("SupplierOrderID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Supplier_Order");
                });

            modelBuilder.Entity("BOX.Models.Supplier_OrderLine", b =>
                {
                    b.Property<int>("SupplierOrderID")
                        .HasColumnType("int");

                    b.Property<int>("FixedProductID")
                        .HasColumnType("int");

                    b.Property<int>("RawMaterialID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SupplierReturnID")
                        .HasColumnType("int");

                    b.HasKey("SupplierOrderID", "FixedProductID", "RawMaterialID");

                    b.HasIndex("FixedProductID");

                    b.HasIndex("RawMaterialID");

                    b.HasIndex("SupplierReturnID");

                    b.ToTable("Supplier_OrderLine");
                });

            modelBuilder.Entity("BOX.Models.Supplier_Return", b =>
                {
                    b.Property<int>("SupplierReturnID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierReturnID"), 1L, 1);

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.HasKey("SupplierReturnID");

                    b.ToTable("Supplier_Return");
                });

            modelBuilder.Entity("BOX.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("user_Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("user_Cellnum")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("user_Email")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("user_FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("user_LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("user_Password")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("UserID");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("BOX.Models.User_Permission", b =>
                {
                    b.Property<int>("UserPermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPermissionID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserPermissionID");

                    b.ToTable("User_Permission");
                });

            modelBuilder.Entity("BOX.Models.User_Role_Permission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserPermissionID")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserPermissionID");

                    b.HasIndex("UserPermissionID");

                    b.ToTable("User_Role_Permission");
                });

            modelBuilder.Entity("BOX.Models.VAT", b =>
                {
                    b.Property<int>("VatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VatID"), 1L, 1);

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.HasKey("VatID");

                    b.ToTable("VAT");
                });

            modelBuilder.Entity("BOX.Models.Write_Off", b =>
                {
                    b.Property<int>("WriteOffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WriteOffID"), 1L, 1);

                    b.Property<int>("QRCodeID")
                        .HasColumnType("int");

                    b.Property<int>("StockTakeID")
                        .HasColumnType("int");

                    b.Property<int>("WriteOffReasonID")
                        .HasColumnType("int");

                    b.HasKey("WriteOffID");

                    b.HasIndex("QRCodeID");

                    b.HasIndex("StockTakeID");

                    b.HasIndex("WriteOffReasonID");

                    b.ToTable("Write_Off");
                });

            modelBuilder.Entity("BOX.Models.Write_Off_Reason", b =>
                {
                    b.Property<int>("WriteOffReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WriteOffReasonID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WriteOffReasonID");

                    b.ToTable("Write_Off_Reason");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("BOX.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("BOX.Models.Admin", b =>
                {
                    b.HasOne("BOX.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BOX.Models.Category_Size_Variables", b =>
                {
                    b.HasOne("BOX.Models.Product_Category", "Product_Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Size_Variables", "Size_Variables")
                        .WithMany()
                        .HasForeignKey("SizeVariablesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product_Category");

                    b.Navigation("Size_Variables");
                });

            modelBuilder.Entity("BOX.Models.Credit_Application", b =>
                {
                    b.HasOne("BOX.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Credit_Application_Status", "Credit_Application_Status")
                        .WithMany()
                        .HasForeignKey("CreditApplicationStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Credit_Application_Status");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BOX.Models.Custom_Product", b =>
                {
                    b.HasOne("BOX.Models.Cost_Price_Formula_Variables", "Cost_Price_Formula_Variables")
                        .WithMany()
                        .HasForeignKey("FormulaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Product_Item", "Product_Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cost_Price_Formula_Variables");

                    b.Navigation("Product_Item");
                });

            modelBuilder.Entity("BOX.Models.Customer", b =>
                {
                    b.HasOne("BOX.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BOX.Models.Customer_Order", b =>
                {
                    b.HasOne("BOX.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Customer_Order_Status", "Customer_Order_Status")
                        .WithMany()
                        .HasForeignKey("CustomerOrderStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Order_Delivery_Schedule", "Order_Delivery_Schedule")
                        .WithMany()
                        .HasForeignKey("OrderDeliveryScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Customer_Order_Status");

                    b.Navigation("Order_Delivery_Schedule");
                });

            modelBuilder.Entity("BOX.Models.Customer_Order_Line", b =>
                {
                    b.HasOne("BOX.Models.Custom_Product", "Custom_Product")
                        .WithMany()
                        .HasForeignKey("CustomProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Customer_Order", "Customer_Order")
                        .WithMany()
                        .HasForeignKey("CustomerOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Customer_Refund", "Customer_Refund")
                        .WithMany()
                        .HasForeignKey("CustomerRefundID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Fixed_Product", "Fixed_Product")
                        .WithMany()
                        .HasForeignKey("FixedProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Custom_Product");

                    b.Navigation("Customer_Order");

                    b.Navigation("Customer_Refund");

                    b.Navigation("Fixed_Product");
                });

            modelBuilder.Entity("BOX.Models.Customer_Refund", b =>
                {
                    b.HasOne("BOX.Models.Customer_Refund_Reason", "Customer_Refund_Reason")
                        .WithMany()
                        .HasForeignKey("CustomerRefundReasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer_Refund_Reason");
                });

            modelBuilder.Entity("BOX.Models.Employee", b =>
                {
                    b.HasOne("BOX.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BOX.Models.Estimate", b =>
                {
                    b.HasOne("BOX.Models.Estimate_Duration", "Estimate_Duration")
                        .WithMany()
                        .HasForeignKey("EstimateDurationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Estimate_Status", "Estimate_Status")
                        .WithMany()
                        .HasForeignKey("EstimateStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estimate_Duration");

                    b.Navigation("Estimate_Status");
                });

            modelBuilder.Entity("BOX.Models.Estimate_Line", b =>
                {
                    b.HasOne("BOX.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Estimate", "Estimate")
                        .WithMany()
                        .HasForeignKey("EstimateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Estimate");
                });

            modelBuilder.Entity("BOX.Models.Fixed_Product", b =>
                {
                    b.HasOne("BOX.Models.Product_Item", "Product_Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.QR_Code", "QR_Code")
                        .WithMany()
                        .HasForeignKey("QRCodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Size_Units", "Size_Units")
                        .WithMany()
                        .HasForeignKey("SizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product_Item");

                    b.Navigation("QR_Code");

                    b.Navigation("Size_Units");
                });

            modelBuilder.Entity("BOX.Models.Order_Delivery_Schedule", b =>
                {
                    b.HasOne("BOX.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BOX.Models.Payment", b =>
                {
                    b.HasOne("BOX.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Payment_Type", "Payment_Type")
                        .WithMany()
                        .HasForeignKey("PaymentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Payment_Type");
                });

            modelBuilder.Entity("BOX.Models.Product_Item", b =>
                {
                    b.HasOne("BOX.Models.Product_Category", "Product_Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product_Category");
                });

            modelBuilder.Entity("BOX.Models.Raw_Material", b =>
                {
                    b.HasOne("BOX.Models.QR_Code", "QR_Code")
                        .WithMany()
                        .HasForeignKey("QRCodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QR_Code");
                });

            modelBuilder.Entity("BOX.Models.Stock_Take", b =>
                {
                    b.HasOne("BOX.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BOX.Models.Supplier", b =>
                {
                    b.HasOne("BOX.Models.Fixed_Product", "Fixed_Product")
                        .WithMany()
                        .HasForeignKey("FixedProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fixed_Product");
                });

            modelBuilder.Entity("BOX.Models.Supplier_Order", b =>
                {
                    b.HasOne("BOX.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BOX.Models.Supplier_OrderLine", b =>
                {
                    b.HasOne("BOX.Models.Fixed_Product", "Fixed_Product")
                        .WithMany()
                        .HasForeignKey("FixedProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Raw_Material", "Raw_Material")
                        .WithMany()
                        .HasForeignKey("RawMaterialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Supplier_Order", "Supplier_Order")
                        .WithMany()
                        .HasForeignKey("SupplierOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Supplier_Return", "Supplier_Return")
                        .WithMany()
                        .HasForeignKey("SupplierReturnID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fixed_Product");

                    b.Navigation("Raw_Material");

                    b.Navigation("Supplier_Order");

                    b.Navigation("Supplier_Return");
                });

            modelBuilder.Entity("BOX.Models.User", b =>
                {
                    b.HasOne("BOX.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BOX.Models.User_Role_Permission", b =>
                {
                    b.HasOne("BOX.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.User_Permission", "UserPermission")
                        .WithMany()
                        .HasForeignKey("UserPermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserPermission");
                });

            modelBuilder.Entity("BOX.Models.Write_Off", b =>
                {
                    b.HasOne("BOX.Models.QR_Code", "QR_Code")
                        .WithMany()
                        .HasForeignKey("QRCodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Stock_Take", "Stock_Take")
                        .WithMany()
                        .HasForeignKey("StockTakeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOX.Models.Write_Off_Reason", "Write_Off_Reason")
                        .WithMany()
                        .HasForeignKey("WriteOffReasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QR_Code");

                    b.Navigation("Stock_Take");

                    b.Navigation("Write_Off_Reason");
                });
#pragma warning restore 612, 618
        }
    }
}
